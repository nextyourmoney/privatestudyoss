{"ast":null,"code":"import { createStore } from 'vuex'; //store 생성 및 내보내기\n\nexport default createStore({\n  //루트 상태 정의\n  state: {\n    userId: \"\"\n  },\n  //루트 상태 값을 읽는 메소드(getter) 정의\n  getters: {\n    getUserId(state, getters, rootState, rootGetters) {\n      return state.userId;\n    }\n\n  },\n  //루트 상태 값을 변화시키는 메소드(setter) 정의(동기 방식)\n  mutations: {\n    setUserId(state, payload) {\n      state.userId = payload;\n    }\n\n  },\n  //비동기 작업을 실행하고 결과에 따라 상태 값을 변화시키는 메소드\n  actions: {\n    //payload: {userId:\"xxxx\", duration:3000}\n    setUserIdByAsync(context, payload) {\n      new Promise((resolve, reject) => {\n        //시간을 요하는 작업(주로 Back-end로 데이터 요청)\n        setTimeout(() => {\n          //성공적으로 응답을 얻었을 경우\n          resolve(payload.userId);\n        }, payload.duration);\n      }).then(data => {\n        //resolve가 되었을 경우 mutations을 이용해서 상태값 변경\n        context.commit(\"setUserId\", data);\n        console.log(\"userId 상태 변경 성공\");\n      }).catch(error => {\n        //예외가 발생했거나, reject된경우\n        console.log(\"userId 상태 변경 실패\");\n      });\n    }\n\n  }\n});","map":{"version":3,"names":["createStore","state","userId","getters","getUserId","rootState","rootGetters","mutations","setUserId","payload","actions","setUserIdByAsync","context","Promise","resolve","reject","setTimeout","duration","then","data","commit","console","log","catch","error"],"sources":["/Users/jbc/Desktop/osstem/projects/node-workspace/front-end-vue/front-end-vue/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\n//store 생성 및 내보내기\nexport default createStore({\n  //루트 상태 정의\n  state: {\n    userId: \"\"\n  },\n  //루트 상태 값을 읽는 메소드(getter) 정의\n  getters: {\n    getUserId(state, getters, rootState, rootGetters) {\n      return state.userId;\n    }\n  },\n  //루트 상태 값을 변화시키는 메소드(setter) 정의(동기 방식)\n  mutations: {\n    setUserId(state, payload) {\n      state.userId = payload;\n    }\n  },\n  //비동기 작업을 실행하고 결과에 따라 상태 값을 변화시키는 메소드\n  actions: {\n    //payload: {userId:\"xxxx\", duration:3000}\n    setUserIdByAsync(context, payload) {\n      new Promise((resolve, reject) => {\n        //시간을 요하는 작업(주로 Back-end로 데이터 요청)\n        setTimeout(() => {\n          //성공적으로 응답을 얻었을 경우\n          resolve(payload.userId);\n        }, payload.duration);\n      })\n        .then((data) => {\n          //resolve가 되었을 경우 mutations을 이용해서 상태값 변경\n          context.commit(\"setUserId\", data);\n          console.log(\"userId 상태 변경 성공\");\n        })\n        .catch((error) => {\n          //예외가 발생했거나, reject된경우\n          console.log(\"userId 상태 변경 실패\");\n        });\n    }\n  }\n})\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B,C,CACA;;AACA,eAAeA,WAAW,CAAC;EACzB;EACAC,KAAK,EAAE;IACLC,MAAM,EAAE;EADH,CAFkB;EAKzB;EACAC,OAAO,EAAE;IACPC,SAAS,CAACH,KAAD,EAAQE,OAAR,EAAiBE,SAAjB,EAA4BC,WAA5B,EAAyC;MAChD,OAAOL,KAAK,CAACC,MAAb;IACD;;EAHM,CANgB;EAWzB;EACAK,SAAS,EAAE;IACTC,SAAS,CAACP,KAAD,EAAQQ,OAAR,EAAiB;MACxBR,KAAK,CAACC,MAAN,GAAeO,OAAf;IACD;;EAHQ,CAZc;EAiBzB;EACAC,OAAO,EAAE;IACP;IACAC,gBAAgB,CAACC,OAAD,EAAUH,OAAV,EAAmB;MACjC,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;QAC/B;QACAC,UAAU,CAAC,MAAM;UACf;UACAF,OAAO,CAACL,OAAO,CAACP,MAAT,CAAP;QACD,CAHS,EAGPO,OAAO,CAACQ,QAHD,CAAV;MAID,CAND,EAOGC,IAPH,CAOSC,IAAD,IAAU;QACd;QACAP,OAAO,CAACQ,MAAR,CAAe,WAAf,EAA4BD,IAA5B;QACAE,OAAO,CAACC,GAAR,CAAY,iBAAZ;MACD,CAXH,EAYGC,KAZH,CAYUC,KAAD,IAAW;QAChB;QACAH,OAAO,CAACC,GAAR,CAAY,iBAAZ;MACD,CAfH;IAgBD;;EAnBM;AAlBgB,CAAD,CAA1B"},"metadata":{},"sourceType":"module"}